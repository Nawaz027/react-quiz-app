[{"/home/nawazz/golang/codedamn projects/quizappreact/src/index.js":"1","/home/nawazz/golang/codedamn projects/quizappreact/src/App.js":"2","/home/nawazz/golang/codedamn projects/quizappreact/src/reportWebVitals.js":"3","/home/nawazz/golang/codedamn projects/quizappreact/src/components/Menu.js":"4","/home/nawazz/golang/codedamn projects/quizappreact/src/helpers/Contexts.js":"5","/home/nawazz/golang/codedamn projects/quizappreact/src/components/Quiz.js":"6","/home/nawazz/golang/codedamn projects/quizappreact/src/helpers/Questions.js":"7","/home/nawazz/golang/codedamn projects/quizappreact/src/components/EndScreen.js":"8"},{"size":513,"mtime":1658560690959,"results":"9","hashOfConfig":"10"},{"size":834,"mtime":1658560728867,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1658402568723,"results":"12","hashOfConfig":"10"},{"size":659,"mtime":1658560598122,"results":"13","hashOfConfig":"10"},{"size":88,"mtime":1658560626446,"results":"14","hashOfConfig":"10"},{"size":2553,"mtime":1658560609674,"results":"15","hashOfConfig":"10"},{"size":449,"mtime":1658560802079,"results":"16","hashOfConfig":"10"},{"size":636,"mtime":1658560584470,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"182ilqa",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/home/nawazz/golang/codedamn projects/quizappreact/src/index.js",[],[],"/home/nawazz/golang/codedamn projects/quizappreact/src/App.js",[],[],"/home/nawazz/golang/codedamn projects/quizappreact/src/reportWebVitals.js",[],[],"/home/nawazz/golang/codedamn projects/quizappreact/src/components/Menu.js",["45","46"],[],"import '../App.css'\nimport {useContext} from 'react'\nimport {GameStateContext} from '../helpers/Contexts'\n\n\nfunction Menu () {\n    const {gameState, setGameState,userName, setUserName} = useContext(GameStateContext)\n\n    return (\n        <div className=\"Menu\">\n            <label> Enter your Name : </label>\n            <input type=\"text\" placeholder=\"Ex. John Smith\" onChange ={event => setUserName(event.target.value) } />\n            <button \n              onClick={ () => \n              setGameState(\"playing\")\n              }\n            >\n              Start Quiz\n            </button>\n\n        </div>\n        \n    \n    \n    );\n\n\n}\n\nexport default Menu;","/home/nawazz/golang/codedamn projects/quizappreact/src/helpers/Contexts.js",[],[],"/home/nawazz/golang/codedamn projects/quizappreact/src/components/Quiz.js",["47"],[],"import {useState} from 'react'\nimport  '../App.css'\nimport Questions from '../helpers/Questions'\nimport {useContext} from 'react'\nimport {GameStateContext} from '../helpers/Contexts'\n\nfunction Quiz() {\n\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [optionChosen, setOptionChosen] = useState(\"\")\n\n    const {score, setScore, gameState, setGameState} = useContext(GameStateContext)\n\n    console.log(Questions)\n\n    const chooseOption = (option) => {\n            setOptionChosen(option)\n    }\n\n    const nextQuestion = () => {\n        if (Questions[currentQuestion].answer === optionChosen ) {\n            setScore(score+1)\n            console.log('You got the correct answer')\n        } else {\n            console.log('You got the incorrect answer')\n        }\n        setCurrentQuestion(currentQuestion+1)\n    }\n\n    const finishQuiz = () => {\n        \n        if (Questions[currentQuestion].answer === optionChosen ) {\n            setScore(score+1)\n            console.log('You got the correct answer in finish')\n        } \n\n        setGameState('finished')\n\n    }\n\n    return (\n        <div className=\"Quiz\">\n             <h1> {Questions[currentQuestion].prompt} </h1>\n             <div className=\"questions\">\n                <button \n                   onClick={()=> {\n                     chooseOption('optionA');\n                   }}\n                >\n                  {Questions[currentQuestion].optionA}\n                </button>\n                <button \n                   onClick={()=> {\n                     chooseOption('optionB');\n                     }}\n                >\n                  {Questions[currentQuestion].optionB}\n                </button>\n                <button \n                   onClick={()=> {\n                     chooseOption('optionC');\n                     }}\n                >\n                  {Questions[currentQuestion].optionC}\n                </button>\n                <button \n                   onClick={()=> {\n                     chooseOption('optionD');\n                     }}\n                >\n                  {Questions[currentQuestion].optionD}\n                </button>\n\n             </div>\n                {currentQuestion === (Questions.length - 1) ?\n\n                (<button onClick={finishQuiz} id=\"nextQuestion\">\n                  Finish Quiz\n                </button>) :\n                (<button onClick={nextQuestion} id=\"nextQuestion\">\n                  Next Question\n                </button> )\n\n                }\n        </div>\n\n    )\n\n}\n\nexport default Quiz\n\n","/home/nawazz/golang/codedamn projects/quizappreact/src/helpers/Questions.js",[],[],"/home/nawazz/golang/codedamn projects/quizappreact/src/components/EndScreen.js",["48"],[],"import {useState} from 'react'\nimport '../App.css'\nimport {useContext} from 'react'\nimport {GameStateContext} from '../helpers/Contexts'\nimport Questions from '../helpers/Questions'\n\nconst EndScreen = () => {\n\n    const {score, setScore, setGameState, userName} = useContext(GameStateContext)\n\nconst restartQuiz = () => {\n    setScore(0)\n    setGameState('menu')\n}\n\n    return (\n      <div className=\"EndScreen\" >\n        <h1> Quiz Finished </h1>\n        <h3> {userName} </h3>\n        <h1> {score} / {Questions.length} </h1>\n        <button onClick = {restartQuiz}> Restart Quiz </button>\n      </div>\n    )\n}\n\nexport default EndScreen;",{"ruleId":"49","severity":1,"message":"50","line":7,"column":12,"nodeType":"51","messageId":"52","endLine":7,"endColumn":21},{"ruleId":"49","severity":1,"message":"53","line":7,"column":36,"nodeType":"51","messageId":"52","endLine":7,"endColumn":44},{"ruleId":"49","severity":1,"message":"50","line":12,"column":29,"nodeType":"51","messageId":"52","endLine":12,"endColumn":38},{"ruleId":"49","severity":1,"message":"54","line":1,"column":9,"nodeType":"51","messageId":"52","endLine":1,"endColumn":17},"no-unused-vars","'gameState' is assigned a value but never used.","Identifier","unusedVar","'userName' is assigned a value but never used.","'useState' is defined but never used."]